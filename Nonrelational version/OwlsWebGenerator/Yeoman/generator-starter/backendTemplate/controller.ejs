<%
%>package OITWeb.<%-PACKAGENAME%>.controller;

import OITWeb.<%-PACKAGENAME%>.exception.ResourceNotFoundException;
import OITWeb.<%-PACKAGENAME%>.model.<%-CLASSNAME%>;
import OITWeb.<%-PACKAGENAME%>.repository.<%-CLASSNAME%>Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/api")
public class <%-CLASSNAME%>Controller {
    @Autowired
    <%-CLASSNAME%>Repository entityRepository;

    //get all entitys
    @CrossOrigin
    @GetMapping("/<%-CLASSNAME%>")
    public List<<%-CLASSNAME%>> getAll<%-CLASSNAME%>s(){
        return entityRepository.findAll();
    }

    //create entity profile
    @CrossOrigin
    @PostMapping("/<%-CLASSNAME%>")
    public <%-CLASSNAME%> create<%-CLASSNAME%>(@Valid @RequestBody <%-CLASSNAME%> entity){
        return entityRepository.save(entity);
    }

    //get entity by id
    @CrossOrigin
    @GetMapping("/<%-CLASSNAME%>/{id}")
    public <%-CLASSNAME%> get<%-CLASSNAME%>ById(@PathVariable(value="id") Long id){
        return entityRepository.findById(id)
                .orElseThrow(()->new ResourceNotFoundException("<%-CLASSNAME%>","id",id));
    }

    //update profile
    @CrossOrigin
    @PutMapping("/<%-CLASSNAME%>/{id}")
    public <%-CLASSNAME%> update<%-CLASSNAME%>(@PathVariable(value="id") Long id, @Valid @RequestBody <%-CLASSNAME%> entityDetail){
        <%-CLASSNAME%> entity=entityRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("<%-CLASSNAME%>","id",id));
<%
        for(var j in BASIC){
        	%>
        entity.set<%- BASIC[j]['$']['name'].charAt(0).toUpperCase()+BASIC[j]['$']['name'].slice(1)%>(entityDetail.get<%- BASIC[j]['$']['name'].charAt(0).toUpperCase()+BASIC[j]['$']['name'].slice(1)%>());<%
        }
        

%>        
		<%-CLASSNAME%> update<%-CLASSNAME%>=entityRepository.save(entity);
        return update<%-CLASSNAME%>;
    }

    //Delete entity profile
    @CrossOrigin
    @DeleteMapping("/<%-CLASSNAME%>/{id}")
    public ResponseEntity<?> delete<%-CLASSNAME%>(@PathVariable(value="id") Long id){
        <%-CLASSNAME%> entity=entityRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("<%-CLASSNAME%>","id",id));
        entityRepository.delete(entity);
        return ResponseEntity.ok().build();

    }

}<%
%>