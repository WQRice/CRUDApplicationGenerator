
<%
// var caseConvert=require("../module/CaseConvert");
var downFirst=function(s) {
    if(s.length==0) return s;
    return s[0].toLowerCase()+s.slice(1);
}

var labelMap = {};
for (var j in myself.BASIC) {
    if (myself.BASIC[j]['$']['uil']!=undefined) {
        labelMap[myself.BASIC[j]['$']['name']] = myself.BASIC[j]['$']['uil'];
    } else {labelMap[myself.BASIC[j]['$']['name']] = myself.CLASSNAME +" "+ myself.BASIC[j]['$']['name']; }
}

var oneArray = myself.forwardMap[myself.CLASSNAME].oneToOne.concat(myself.forwardMap[myself.CLASSNAME].manyToOne);
var manyArray = myself.forwardMap[myself.CLASSNAME].oneToMany.concat(myself.forwardMap[myself.CLASSNAME].manyToMany);

var attMap = {};
for (var i in oneArray) {
    attMap[oneArray[i]] = {
        oneOrMany : "one",
        inputAttRef: "input"+myself.CLASSNAME+oneArray[i]+"Array",
        attInSelfName: downFirst(oneArray[i])+"In"+myself.CLASSNAME,
        selfInAttName: downFirst(myself.CLASSNAME)+"In" + oneArray[i],
        inputColumnArray : "input" + oneArray[i] +"ColumnArray",
        dropInputAttData: "drop_input"+ oneArray[i] + "DataProvider"

    }
}

for (var i in manyArray) {
    attMap[manyArray[i]] = {
        oneOrMany : "many",
        inputAttRef: "input"+myself.CLASSNAME+manyArray[i]+"Array",
        attInSelfName: downFirst(manyArray[i])+"In"+myself.CLASSNAME,
        selfInAttName: downFirst(myself.CLASSNAME)+"In" + manyArray[i],
        inputColumnArray : "input" + manyArray[i] +"ColumnArray"

    }
}

var entityMap = {};
for(var i in dataArray) {
    var ele = {};
    ele.basic = dataArray[i].BASIC;

    var labelMap = [];

    for (var j in dataArray[i].BASIC) {
        if (dataArray[i].BASIC[j]['$']['uil']!=undefined) {
            labelMap[j] = dataArray[i].BASIC[j]['$']['uil'];
        } else {labelMap[j] = dataArray[i].CLASSNAME +" "+ dataArray[i].BASIC[j]['$']['name']; }
    }

    ele.labels = labelMap;
    entityMap[dataArray[i].CLASSNAME] = ele;
}


%>


/**
* Add <%=myself.CLASSNAME%> module
*/

define(['ojs/ojcore', 'knockout', 'ojs/ojcheckboxset'
], function (oj, ko) {
    /**
     * The view model for the main content view template
     */
    function viewModel() {
        var self = this;
        // var rootViewModel = ko.dataFor(document.getElementById('globalBody'));
        // self.userName = rootViewModel.appName();

        self.initialize = function () {


           for (var property in self.attMap){
               if(self.attMap.hasOwnProperty(property)){
                   if(self.dropdownMap.hasOwnProperty(property)){
                       //alert("drop_ItemOrder"+property+"Array");
                       self["drop_<%=myself.CLASSNAME%>"+property+"Array"].removeAll();
                       self["get"+property]();
                   }
               }
           }

            ////// alert(self.userName);
        if(oj.Router.rootInstance.retrieve()!=undefined && oj.Router.rootInstance.retrieve().length!=0 && oj.Router.rootInstance.retrieve()[oj.Router.rootInstance.retrieve().length-1].from == "Add<%-myself.CLASSNAME%>") {
            //alert(JSON.stringify(oj.Router.rootInstance.retrieve()));

            var stack = oj.Router.rootInstance.retrieve();
            var popped = stack.pop();
            //alert(JSON.stringify(popped));

            if(stack === []) {
                oj.Router.rootInstance.store(null);
           } else {
               oj.Router.rootInstance.store(stack);
           }


        <%for(var i=0; i<myself.BASIC.length; i++){%>
        self.input<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>(popped.<%-myself.BASIC[i]['$']['name']%>);
        <%}%>

            for (var property in self.attMap){
                if(self.attMap.hasOwnProperty(property)){
                    if(!self.dropdownMap.hasOwnProperty(property)){
                        if($.inArray(property, self.oneArray)>=0) {

                        self[self.attMap[property].inputAttRef].removeAll();

                        self[self.attMap[property].inputAttRef].push(popped[property]);
                        }
                    } else {
                    self[self.attMap[property].dropInputAttData](null);
                    if(popped[property]!=null && !popped[property].hasOwnProperty('value')) {
                    self[property + "_selectValOpt"](
                        {
                        value: popped[property].id,
                        label: self.repNameCalc(property, popped[property])
                        }
                            );
                            } else {
                        self[property + "_selectValOpt"](
                        popped[property]
                        );
                        }
                    //self["drop_ItemOrder"+property+"Array"].removeAll();
                    //self["get"+property]();
                    }
                }

            }
            // self[]
            //
            // self.inputCourseProfessorArray.removeAll();

        } else {

        <%for(var i=0; i<myself.BASIC.length; i++){%>
        self.input<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>(null);
        <%}%>


            for (var property in self.attMap){
                if(self.attMap.hasOwnProperty(property)){
                   if(!self.dropdownMap.hasOwnProperty(property)){
                        self[self.attMap[property].inputAttRef].removeAll();
                   } else {
                       self[self.attMap[property].dropInputAttData](null);

                        self[property + "_selectValOpt"](null);
                        // alert("drop_ItemOrder"+property+"Array");
                        // self["drop_ItemOrder"+property+"Array"].removeAll();
                       //self["get"+property]();
                   }
                }

            }

        }

        };

        self.oneArray = <%- JSON.stringify(oneArray)%>;
        self.manyArray = <%- JSON.stringify(manyArray)%>;
        self.attMap = <%- JSON.stringify(attMap, null, 4) %>;

        self.dropdownMap = <%- JSON.stringify(myself.REPNAMEMAP) %>;
        //calculated the concatenated name for dropdown list
        self.repNameCalc = function(property, data){
            var repName = "";
            var namelist = self.dropdownMap[property];
            for (var i=0; i<namelist.length; i++) {
                if(data[namelist[i]]!=null) {
                var space = (i == namelist.length-1) ? "" : " ";
                repName = repName + data[namelist[i]] +space ;
                }
            }

            return repName;
        };

        self.curAtt = ko.observable("");

        // self.selectAllDisabled = ko.observable();
        self.selectAllDisabled = ko.computed(function ()
            {   if(self.attMap[self.curAtt()]!=undefined)
                return self.attMap[self.curAtt()].oneOrMany === "one";
            else return false;}
        );


        self.selectAtt = ko.computed(function() {
                if (self.attMap[self.curAtt()] != undefined) {
                    if (self.attMap[self.curAtt()].oneOrMany === "one") {
                        return "Select " + self.curAtt();
                    } else {
                        return "Select " + self.curAtt() + " (multiple)";
                    }
                }
                else return "";
            }
               );



        //intialize the observable values in the forms
        self.input<%=myself.CLASSNAME%>Id = ko.observable();

        <%for(var ii=0; ii<myself.BASIC.length; ii++){%>
        self.input<%=myself.CLASSNAME + myself.BASIC[ii]['$']['name']%> = ko.observable();
        <%}%>


// for  one array (many to one or one to one)


self.mapFields = function(item) {
    var data = item['data'];
    var mappedItem = {};
    mappedItem['data'] = {};
    mappedItem['data']['label'] = data['label'];
    mappedItem['data']['value'] = data['id'];
    mappedItem['metadata'] = {'key': data['id']};

    return mappedItem;
};
self.dataMapping = {'mapFields': self.mapFields};


     <% for (var jj in oneArray) {%>

<%if(myself.REPNAMEMAP[oneArray[jj]]== undefined) {%>


    self.input<%=myself.CLASSNAME+oneArray[jj]%>Array = ko.observableArray().extend({ deferred: true });
    self.input<%=oneArray[jj]%>DataProvider = new oj.ArrayDataProvider(self.input<%=myself.CLASSNAME+oneArray[jj]%>Array, {keyAttributes: 'id'});

self.input<%=oneArray[jj]%>ColumnArray = [

{"headerText": "<%-oneArray[jj]%> Id", "field": "id", "headerStyle": 'font-weight:bold;  Height:8px; background-color: white'},

<% for(var j in entityMap[oneArray[jj]].basic) {-%>
{
"headerText": "<%-entityMap[oneArray[jj]].labels[j]%>",
"field" : "<%-entityMap[oneArray[jj]].basic[j]['$']['name']%>",
"headerStyle" : 'font-weight:bold;  Height:8px; background-color: white'
}
<%if(j!= entityMap[oneArray[jj]].basic.length-1) {-%>
,
<%}-%>
<%}-%>
];

<%} else {%>

  self.<%=oneArray[jj]%>_selectValOpt = ko.observable();

  self.drop_input<%=oneArray[jj]%>DataProvider = ko.observable();


   self.drop_<%=myself.CLASSNAME+oneArray[jj]%>Array = ko.observableArray().extend({ deferred: true });

        self.drop_<%-oneArray[jj]%>Arraydataprovider = new oj.ArrayDataProvider(self.drop_<%=myself.CLASSNAME+oneArray[jj]%>Array, {keyAttributes: 'id'});

       self.drop_<%-oneArray[jj]%>dataProvider = new oj.ListDataProviderView(self.drop_<%-oneArray[jj]%>Arraydataprovider, {'dataMapping':  self.dataMapping});
       // self.func = (function(){
       //     console.log(JSON.stringify(self.drop_CustomerdataProvider));
       // })();


self.get<%-oneArray[jj]%> = function(){
    $.get('http://localhost:8080/<%-oneArray[jj]%>', function (data) {
//// alert(JSON.stringify(data));
//console.log(data);

// for (var i = 0; i < data.length; i++) {
var extractedData = data["_embedded"].<%-oneArray[jj]%>;
//// alert(JSON.stringify(extractedData));


for (var i = 0; i < extractedData.length; i++) {

    var topush = {
    id: extractedData[i].id,
    label: self.repNameCalc("<%-oneArray[jj]%>", extractedData[i])

};
self.drop_<%=myself.CLASSNAME+oneArray[jj]%>Array.push(topush);

}


});
};

<%}%>
<%}%>



    <%for (var i in oneArray) {%>
        self.<%-oneArray[i]%>_attObservableArray = ko.observableArray();


        self.<%-oneArray[i]%>_attArraydataprovider = new oj.ArrayTableDataSource(self.<%-oneArray[i]%>_attObservableArray, {keyAttributes: 'id'});


        self.<%-oneArray[i]%>_selectAttColumnArray_single = ko.observable();
    <%}%>

    <%for (var i in manyArray) {%>
        self.<%-manyArray[i]%>_attObservableArray = ko.observableArray();


        self.<%-manyArray[i]%>_attArraydataprovider = new oj.ArrayTableDataSource(self.<%-manyArray[i]%>_attObservableArray, {keyAttributes: 'id'});
        self.<%-manyArray[i]%>_selectAttColumnArray_multi = ko.observable();
    <%}%>


// for  many array (one to many or many to many)



        <% for (var jj in manyArray) {%>
        self.input<%=myself.CLASSNAME+manyArray[jj]%>Array = ko.observableArray().extend({ deferred: true });
        self.input<%=manyArray[jj]%>DataProvider = new oj.ArrayDataProvider(self.input<%=myself.CLASSNAME+manyArray[jj]%>Array, {keyAttributes: 'id'});

        self.input<%=manyArray[jj]%>ColumnArray = [

        {"headerText": "<%-manyArray[jj]%> Id", "field": "id", "headerStyle": 'font-weight:bold;  Height:8px; background-color: white'},

        <% for(var j in entityMap[manyArray[jj]].basic) {-%>
        {
        "headerText": "<%-entityMap[manyArray[jj]].labels[j]%>",
        "field" : "<%-entityMap[manyArray[jj]].basic[j]['$']['name']%>",
        "headerStyle" : 'font-weight:bold;  Height:8px; background-color: white'
        }
        <%if(j!= entityMap[manyArray[jj]].basic.length-1) {-%>
        ,
        <%}-%>
        <%}-%>
        ];
        <%}%>



        self.selectAttColumnArray_multi = ko.observable();



        self.selectAttributeinEditDialog = function(data, event) {

            // document.getElementById('selectAttTable').selection = [];
            ////// alert("open nested popup");
            ////// alert(self.selectAllDisabled());


            self.curAtt(data.substring(4));
           //// alert(self.curAtt());
           //// alert(self.selectAllDisabled());

            // self.selectAllDisabled(self.attMap[self.curAtt()].oneOrMany === "one");
            // self.selectAllDisabled(true);

            self[self.curAtt()+"_attObservableArray"].removeAll();

            var callback = function() {
                var q = jQuery.Deferred(), queue = q;


                    if (self.selectAllDisabled()) {
                        var array0 = JSON.parse(JSON.stringify(self[self.attMap[self.curAtt()].inputColumnArray]));

                        queue = queue.then(function () {

                        array0.unshift({
                            "renderer": oj.KnockoutTemplateUtils.getRenderer(self.curAtt()+"_checkbox_tmpl_single", true),
                            "headerRenderer": oj.KnockoutTemplateUtils.getRenderer(self.curAtt()+"_checkbox_hdr_tmpl_single", true)
                        });
                        });

                        queue.done(function() {
                        self[self.curAtt()+"_selectAttColumnArray_single"](array0);
                        }
                        );
                        return q.resolve(true);
                    } else {
                        var array = JSON.parse(JSON.stringify(self[self.attMap[self.curAtt()].inputColumnArray]));
                        queue = queue.then(function () {

                        array.unshift({
                            "renderer": oj.KnockoutTemplateUtils.getRenderer(self.curAtt()+"_checkbox_tmpl_multi", true),
                            "headerRenderer": oj.KnockoutTemplateUtils.getRenderer(self.curAtt()+"_checkbox_hdr_tmpl_multi", true)
                        });
                        });
                        queue.done(function() {
                        self[self.curAtt()+"_selectAttColumnArray_multi"](array);
                        }
                        );
                        return q.resolve(true);
                    }
            };


            var selectAttTable = self.selectAllDisabled()? self.curAtt()+"_selectAttTable_single" : self.curAtt()+"_selectAttTable_multi";
            var attSelectDialog = self.selectAllDisabled()? "#"+self.curAtt()+"_attSelectDialog_single" : "#"+self.curAtt()+"_attSelectDialog_multi";


            callback().then(
            $.get('http://localhost:8080/'+self.curAtt(), function (data) {
               //// alert(JSON.stringify(data));
                //console.log(data);

                // for (var i = 0; i < data.length; i++) {
                var extractedData = data["_embedded"][self.curAtt()];
                //// alert(JSON.stringify(extractedData));


                for (var i = 0; i < extractedData.length; i++) {
                    //// alert(i);
                    //// alert("test");

                    var topush = JSON.parse(JSON.stringify(extractedData[i]));
                    delete topush["_links"];
                    topush.Selected =  ko.observable([]);

                    // var topush = {
                    //     Selected: ko.observable([]),
                    //     id: extractedData[i].id,
                    //     firstName: extractedData[i].firstName,
                    //     lastName: extractedData[i].lastName
                    // };

                    var inputAttRef = self.attMap[self.curAtt()].inputAttRef;
                    //// alert("topush"+JSON.stringify(topush));
                    //// alert(JSON.stringify(self[inputAttRef]()));
                    if (self[inputAttRef]()!=null) {
                        for (var j = 0; j < self[inputAttRef]().length; j++) {
                            if (self[inputAttRef]()[j]!=undefined && self[inputAttRef]()[j].id == topush.id) {
                                topush.Selected(["checked"]);
                            }
                        }
                    }

                    self[self.curAtt() +"_attObservableArray"].push(topush);
                    //// alert(JSON.stringify(self.attObservableArray()));

                }

                var selectionObj = [];
                var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                for (var i = 0; i < totalSize; i++) {
                    self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                        if (row.data.Selected().length > 0 &&
                            row.data.Selected()[0] == 'checked') {
                            selectionObj.push({startIndex: {row: row.index}, endIndex: {row: row.index}});
                        }

                        if (row.index == totalSize - 1) {
                            document.getElementById(selectAttTable).selection = selectionObj;
                        }
                    });
                }

            })
            ).done(function() {
                document.querySelector(attSelectDialog).open();
                //document.getElementById('selectAttTable_single').selection =[];
            });


        };



        self.selectionListener_single = function(event)
        {

            //// alert(JSON.stringify(event.detail.previousValue));
           // alert('selectionlistner');
            var data = event.detail;


            if (data != null) {

                var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                for (var i = 0; i < totalSize; i++) {
                    self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                        var oldObj = document.getElementById(self.curAtt()+'_selectAttTable_single').selection;
                       // alert(oldObj);

                        for (var j=0; j<oldObj.length; j++) {
                            if(oldObj[j].startIndex.row === row.index){
                                row.data.Selected([]);
                            }
                        }


                    });
                }


                var selectionObj = data.value;
                // var totalSize = self.attArraydataprovider.totalSize();


                for (var i = 0; i < totalSize; i++) {
                    self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                        var foundInSelection = false;
                        if (selectionObj) {
                            //// alert(JSON.stringify(selectionObj));
                            for (var j = 0; j < selectionObj.length; j++) {
                                var range = selectionObj[j];
                                var startIndex = range.startIndex;
                                var endIndex = range.endIndex;

                                if (startIndex != null && startIndex.row != null) {
                                    if (row.index >= startIndex.row && row.index <= endIndex.row) {
                                        row.data.Selected(['checked']);
                                        foundInSelection = true;
                                    }
                                }
                            }
                        }
                        if (!foundInSelection) {
                            row.data.Selected([]);
                        }
                    });
                }
            }



        };
        self.selectionListener_multi = function(event)
        {

            //// alert(JSON.stringify(event.detail.previousValue));
            //// alert('selectionlistner');
            var data = event.detail;

            if (data != null) {
                var selectionObj = data.value;
                var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                var i, j;
                for (i = 0; i < totalSize; i++) {
                    self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                        var foundInSelection = false;
                        if (selectionObj) {
                            //// alert(JSON.stringify(selectionObj));
                            for (j = 0; j < selectionObj.length; j++) {
                                var range = selectionObj[j];
                                var startIndex = range.startIndex;
                                var endIndex = range.endIndex;

                                if (startIndex != null && startIndex.row != null) {
                                    if (row.index >= startIndex.row && row.index <= endIndex.row) {
                                        row.data.Selected(['checked']);
                                        foundInSelection = true;
                                    }
                                }
                            }
                        }
                        if (!foundInSelection) {
                            row.data.Selected([]);
                        }
                    });
                }
            }


        };
        self.selectAllListener = function(event)
        {
            //// alert("selectall");
            if (self._clearCheckboxHdr)
            {
                return;
            }
            var data = event.detail;
            if (data != null)
            {
                var table = document.getElementById(self.curAtt()+"_selectAttTable_multi");
                if (data['value'].length > 0)
                {
                    var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                    table.selection = [{startIndex: {"row":0}, endIndex:{"row": totalSize - 1}}];
                }
                else
                {
                    table.selection = [];
                }
            }
        };
        self.syncCheckboxes = function(event)
        {
            //// alert("sync");
            //// alert(JSON.stringify(event));
            event.stopPropagation();

            if(self.selectAllDisabled()) {

                setTimeout(function () {
                    // sync the checkboxes with selection obj
                    var selectionObj = [];
                    var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                    var i;
                    var oldSelectionObj = document.getElementById(self.curAtt()+'_selectAttTable_single').selection;

                    for (i = 0; i < totalSize; i++) {
                        self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                            if (row.data.Selected().length > 0 &&
                                row.data.Selected()[0] == 'checked') {
                                if(oldSelectionObj!=null && oldSelectionObj.length>0 && oldSelectionObj[0].startIndex.row == row.index) {
                                    row.data.Selected([]);
                                } else {
                                    selectionObj.push({startIndex: {row: row.index}, endIndex: {row: row.index}});
                                }
                            }

                            if (row.index == totalSize - 1) {
                                document.getElementById(self.curAtt()+'_selectAttTable_single').selection = selectionObj;
                                //// alert("selectionobj after sync"+ JSON.stringify(selectionObj));
                            }
                        });
                    }
                }, 0);

            } else {

                if (event.currentTarget.id != self.curAtt()+'_table_checkboxset_hdr_multi') {
                    self._clearCheckboxHdr = true;
                    $('#'+self.curAtt()+'_table_checkboxset_hdr_multi')[0].value = [];

                    self._clearCheckboxHdr = false;
                }
                setTimeout(function () {
                    // sync the checkboxes with selection obj
                    var selectionObj = [];
                    var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                    var i;
                    for (i = 0; i < totalSize; i++) {
                        self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                            if (row.data.Selected().length > 0 &&
                                row.data.Selected()[0] == 'checked') {
                                selectionObj.push({startIndex: {row: row.index}, endIndex: {row: row.index}});
                            }

                            if (row.index == totalSize - 1) {
                                document.getElementById(self.curAtt()+'_selectAttTable_multi').selection = selectionObj;
                                //// alert("selectionobj after sync"+ JSON.stringify(selectionObj));
                            }
                        });
                    }
                }, 0);
            }
        };
        self.clearAttributeSelect = function() {
            var selectAttTable = self.selectAllDisabled()? self.curAtt()+"_selectAttTable_single" : self.curAtt()+"_selectAttTable_multi";

            var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
            for (var i = 0; i < totalSize; i++) {
                self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                    var oldObj = document.getElementById(selectAttTable).selection;

                    for (var j=0; j<oldObj.length; j++) {
                        if(oldObj[j].startIndex.row === row.index){
                            row.data.Selected([]);
                        }
                    }


                });
            }
            document.getElementById(selectAttTable).selection=[];
            if(!self.selectAllDisabled()) {
                self._clearCheckboxHdr = true;
                $('#'+self.curAtt()+'_table_checkboxset_hdr_multi')[0].value = [];

                self._clearCheckboxHdr = false;
            }


        };
        self.closeAttributeSelect = function () {


            //
            // var main_element = document.getElementById('table');
            // var main_currentRow = main_element.currentRow;
            //
            // var main_rowIndex = main_currentRow['rowIndex'];
            // var main = vm.CourseObservableArray()[main_rowIndex];

            // get selected id of associated attributes
            // var element = document.getElementById('selectAttTable');
            // var currentRow = element.currentRow;
            var selectAttTable = self.selectAllDisabled()? self.curAtt()+"_selectAttTable_single" : self.curAtt()+"_selectAttTable_multi";
            var attSelectDialog = self.selectAllDisabled()? "#"+self.curAtt()+"_attSelectDialog_single" : "#"+self.curAtt()+"_attSelectDialog_multi";

            var selection = document.getElementById(selectAttTable).selection;

            self[self.attMap[self.curAtt()].inputAttRef].removeAll();

            if (selection != null && selection.length>0) {

                for (var i=0; i< selection.length; i++) {

                    var rowIndex = selection[i].startIndex.row;
                    var selected = self[self.curAtt()+"_attObservableArray"]()[rowIndex];
                    //// alert(JSON.stringify(self.attObservableArray()));
                    self[self.attMap[self.curAtt()].inputAttRef].push(selected);

                    // self.inputCourseProfessorArray.push(selected);
                    //// alert(JSON.stringify(self.inputCourseProfessorArray()));

                    //// alert(JSON.stringify(selected));
                }



                document.querySelector(attSelectDialog).close();
            } else {
                if(confirm("Are you sure you do not want to select any row?")){
                    document.querySelector(attSelectDialog).close();
                }
            }
        };
        self.clearSelectedAtt =  function(data) {

            self[self.attMap[data.substring(5)].inputAttRef].removeAll();
        };

        self.saveButtonClick = function() {
            var elementArray = [];


            <%for(var i=0; i<myself.BASIC.length; i++){%>
            elementArray.push(document.getElementById("<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>Input"));
            <%}%>



            var invalidflag=false;
            for (var i=0; i<elementArray.length; i++) {
                if (!(elementArray[i].valid === "valid")) {
                 if(elementArray[i].showMessages !== undefined){
                    elementArray[i].showMessages();
                    if (invalidflag==false) invalidflag = true;
                    }
                }
            }


            //proceed to add or update record only if all input fields are valid
            if(invalidflag==false) {

                // if it is a adding action, do POS
                self.addRow();

            }

            };


        self.addRow = function () {



            var urls = [];
            for (var j in self.oneArray) {

            var inputAttRef;
            var array = [];

            if (self.dropdownMap.hasOwnProperty(self.oneArray[j])) {
                inputAttRef = self.attMap[self.oneArray[j]].dropInputAttData;

                if (self[inputAttRef]() != null) {
                    array.push({
                    id: self[inputAttRef]()
                    });
                }
            } else {
                inputAttRef = self.attMap[self.oneArray[j]].inputAttRef;

                if (self[inputAttRef]()[0] != null) {
                array = self[inputAttRef]();
                }
            }

                if (array.length > 0) {

                var associationUrl =  "/" + self.oneArray[j] + "/" + array[0].id;
                urls.push(associationUrl);
                }
            }


            for (var j in self.manyArray) {
                var inputAttRef = self.attMap[self.manyArray[j]].inputAttRef;
                // alert(self[inputAttRef]().length);

                // if (self[inputAttRef]().length > 0) {

                for (var i = 0; i < self[inputAttRef]().length; i++) {
                    var associationUrl = "/" + self.manyArray[j] + "/" + self[inputAttRef]()[i].id;
                    urls.push(associationUrl);

                }
            // }
            }


            var container = function(id, count){
                $.ajax({
                    type: "POST",
                    url: "http://localhost:8080/api/<%=myself.CLASSNAME%>/" + id  + urls[count],
                        success: function () {
                        //alert("connection success one");
                            if(count==0){
                            oj.Router.rootInstance.go("<%=myself.CLASSNAME%>");

                            }else {
                            count--;
                            container(id, count);
                            }

                            },
                        error: function (xhr) {
                            console.log('error', xhr);
                        // alert("connection failed");
                        }
                    }
                );
            };

            $.ajax({
                type: "POST",
                contentType: 'application/json',
                url: "http://localhost:8080/<%=myself.CLASSNAME%>",
                data: JSON.stringify(
                    {
                        // 'Id': self.inputCourseId(),

        <%for(var i=0; i<myself.BASIC.length; i++){%>
        '<%=myself.BASIC[i]['$']['name']%>' : self.input<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>()
        <%if(i!= myself.BASIC.length-1) {%>
        ,
        <%}%>
        <%}%>


                    }),
                dataType: "json"}
            ).done(
                function (returndata) {
                   // var q = jQuery.Deferred(),
                    //    queuechain = q;

                   // for (var j in self.oneArray) {
                   //     (function(j) {
                    var count = urls.length-1;
                    // var q = jQuery.Deferred(),
                    //     queuechain = q;
                    //
                    // for (var j in self.oneArray) {
                    //     (function(j) {
                    //
                    //     var inputAttRef;
                    //     var array = [];
                    //     var attId;
                    //
                    //     if(self.dropdownMap.hasOwnProperty(self.oneArray[j])){
                    //         inputAttRef = self.attMap[self.oneArray[j]].dropInputAttData;
                    //         if (self[inputAttRef]()!=null){
                    //           array.push({
                    //           id : self[inputAttRef]()
                    //           });
                    //         attId = "value";
                    //           }
                    //         } else {
                    //           inputAttRef = self.attMap[self.oneArray[j]].inputAttRef;
                    //
                    //             if(self[inputAttRef]()[0]!=null){
                    //             array = self[inputAttRef]();
                    //             }
                    //         }
                    //
                    //         if (array.length > 0) {
                    //
                    //             var associationUrl = "http://localhost:8080/api/Book/" + returndata.id + "/"+ self.oneArray[j]+ "/" + array[0].id;
                    //            // alert(associationUrl);
                    //             queuechain = queuechain.then( function () {
                    if(count>=0) {
                    container(returndata.id, count);
                    } else {
                        oj.Router.rootInstance.go("<%=myself.CLASSNAME%>");
                        }
                    });

        }











        self.backButtonClick=function(){
           // alert("hi, I going back to page: "+oj.Router.rootInstance.retrieve().page);
            oj.Router.rootInstance.go("<%-myself.CLASSNAME%>");
        };


<% for (var jj in oneArray) {%>
self.to<%-oneArray[jj]%> = function() {

//var rootViewModel = ko.dataFor(document.getElementById('globalBody'));
var stack = oj.Router.rootInstance.retrieve() == undefined? [] : oj.Router.rootInstance.retrieve();


//alert(self.inputItemOrderOrderLineArray());
    stack.push( {
'from':"Add<%-myself.CLASSNAME%>",
    //'data':
    //{

<%for(var i=0; i<myself.BASIC.length; i++){-%>

'<%-myself.BASIC[i]['$']['name']%>': self.input<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>()
  <%if( (oneArray.length + manyArray.length) != 0 || i!=myself.BASIC.length-1) {-%>
   ,
  <%}-%>
<%}-%>

<%for(var j in oneArray) {-%>
'<%-oneArray[j]%>':
    <%if(myself.REPNAMEMAP.hasOwnProperty(oneArray[j])) {-%>
        self.<%-oneArray[j]%>_selectValOpt()
   <%}else {-%>
    self.input<%=myself.CLASSNAME + oneArray[j]%>Array()[0]
    <%}-%>
<%if(manyArray.length != 0 || j !=oneArray.length-1) {-%>
   ,
<%}-%>
<%}-%>

<%for(var k in manyArray) {-%>
'<%-manyArray[k]%>': self.input<%=myself.CLASSNAME + manyArray[k]%>Array()
<%if( k !=oneArray.length-1) {-%>
,
<%}-%>
<%}-%>

    //}
    });

    oj.Router.rootInstance.store(stack);

    oj.Router.rootInstance.go("<%-oneArray[jj]%>");


  };
<%}%>

<% for (var jj in manyArray) {%>
self.to<%-manyArray[jj]%> = function() {

//var rootViewModel = ko.dataFor(document.getElementById('globalBody'));
var stack = oj.Router.rootInstance.retrieve() == undefined? [] : oj.Router.rootInstance.retrieve();


//alert(self.inputItemOrderOrderLineArray());
stack.push( {
'from':"Add<%-myself.CLASSNAME%>",
//'data':
//{

<%for(var i=0; i<myself.BASIC.length; i++){-%>

'<%-myself.BASIC[i]['$']['name']%>': self.input<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>()
<%if( (oneArray.length + manyArray.length) != 0 || i!=myself.BASIC.length-1) {-%>
,
<%}-%>
<%}-%>

<%for(var j in oneArray) {-%>
'<%-oneArray[j]%>':
    <%if(myself.REPNAMEMAP.hasOwnProperty(oneArray[j])) {-%>
        self.<%-oneArray[j]%>_selectValOpt()
    <%}else {-%>
    self.input<%=myself.CLASSNAME + oneArray[j]%>Array()[0]
    <%}-%>
<%if(manyArray.length != 0 || j !=oneArray.length-1) {-%>
,
<%}-%>
<%}-%>
<%for(var k in manyArray) {-%>
'<%-manyArray[k]%>': self.input<%=myself.CLASSNAME + manyArray[k]%>Array()
<%if( k !=oneArray.length-1) {-%>
,
<%}-%>
<%}-%>
    //}
});

oj.Router.rootInstance.store(stack);

oj.Router.rootInstance.go("<%-manyArray[jj]%>");


};
<%}%>





    }

    vm=new viewModel;

    return vm;
});