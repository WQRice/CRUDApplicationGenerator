
<%
// var caseConvert=require("../module/CaseConvert");
var downFirst=function(s) {
    if(s.length==0) return s;
    return s[0].toLowerCase()+s.slice(1);
}

var labelMap = {};
for (var j in myself.BASIC) {
    if (myself.BASIC[j]['$']['uil']!=undefined) {
        labelMap[myself.BASIC[j]['$']['name']] = myself.BASIC[j]['$']['uil'];
    } else {labelMap[myself.BASIC[j]['$']['name']] = myself.CLASSNAME +" "+ myself.BASIC[j]['$']['name']; }
}

var oneArray = myself.forwardMap[myself.CLASSNAME].oneToOne.concat(myself.forwardMap[myself.CLASSNAME].manyToOne);
var manyArray = myself.forwardMap[myself.CLASSNAME].oneToMany.concat(myself.forwardMap[myself.CLASSNAME].manyToMany);

var attMap = {};
for (var i in oneArray) {
    attMap[oneArray[i]] = {
        oneOrMany : "one",
        inputAttRef: "input"+myself.CLASSNAME+oneArray[i]+"Array",
        attInSelfName: downFirst(oneArray[i])+"In"+myself.CLASSNAME,
        selfInAttName: downFirst(myself.CLASSNAME)+"In" + oneArray[i],
        inputColumnArray : "input" + oneArray[i] +"ColumnArray",
        dropInputAttData: "drop_input"+ oneArray[i] + "DataProvider"


    }
}

for (var i in manyArray) {
    attMap[manyArray[i]] = {
        oneOrMany : "many",
        inputAttRef: "input"+myself.CLASSNAME+manyArray[i]+"Array",
        attInSelfName: downFirst(manyArray[i])+"In"+myself.CLASSNAME,
        selfInAttName: downFirst(myself.CLASSNAME)+"In" + manyArray[i],
        inputColumnArray : "input" + manyArray[i] +"ColumnArray"

    }
}

var entityMap = {};
for(var i in dataArray) {
    var ele = {};
    ele.basic = dataArray[i].BASIC;

    var labelMap = [];

    for (var j in dataArray[i].BASIC) {
        if (dataArray[i].BASIC[j]['$']['uil']!=undefined) {
            labelMap[j] = dataArray[i].BASIC[j]['$']['uil'];
        } else {labelMap[j] = dataArray[i].CLASSNAME +" "+ dataArray[i].BASIC[j]['$']['name']; }
    }

    ele.labels = labelMap;
    entityMap[dataArray[i].CLASSNAME] = ele;
}


%>


/**
 * Edit <%=myself.CLASSNAME%> module
 */


define(['ojs/ojcore', 'knockout', 'ojs/ojcheckboxset'
], function (oj, ko) {
    /**
     * The view model for the main content view template
     */
    function viewModel() {
        var self = this;
        var rootViewModel = ko.dataFor(document.getElementById('globalBody'));


        self.initialize = function () {
            // document.getElementById("buttontext").innerHTML = 'Update';
            // document.getElementById("dialogTitleId").innerHTML = 'Edit Course Record';

        for (var property in self.attMap){
            if(self.attMap.hasOwnProperty(property)){
                if(self.dropdownMap.hasOwnProperty(property)){
                    //alert("drop_ItemOrder"+property+"Array");
                    self["drop_<%=myself.CLASSNAME%>"+property+"Array"].removeAll();
                    self["get"+property]();
                }
            }
        }

        if(oj.Router.rootInstance.retrieve()!=undefined && oj.Router.rootInstance.retrieve().length!=0 && oj.Router.rootInstance.retrieve()[oj.Router.rootInstance.retrieve().length-1].from == "Edit<%-myself.CLASSNAME%>") {

            var stack = oj.Router.rootInstance.retrieve();
            var popped = stack.pop();
            //alert(JSON.stringify(popped));

            if(stack === []) {
                oj.Router.rootInstance.store(null);
                } else {
                oj.Router.rootInstance.store(stack);
            }


            self.input<%=myself.CLASSNAME%>Id(popped.id);

            <%for(var i=0; i<myself.BASIC.length; i++){%>
                self.input<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>(popped.<%-myself.BASIC[i]['$']['name']%>);
            <%}%>

            for (var property in self.attMap){
                if(self.attMap.hasOwnProperty(property)){
                    if(!self.dropdownMap.hasOwnProperty(property)){
                        if($.inArray(property, self.oneArray)>=0) {

                        self[self.attMap[property].inputAttRef].removeAll();
                        self[self.attMap[property].inputAttRef].push(popped[property]);
                        }
                    } else {
                        self[self.attMap[property].dropInputAttData](null);
                        if(popped[property]!=null && !popped[property].hasOwnProperty('value')) {
                            self[property + "_selectValOpt"](
                                {
                                value: popped[property].id,
                                label: self.repNameCalc(property, popped[property])
                                }
                            );
                            } else {
                            self[property + "_selectValOpt"](
                                popped[property]
                            );
                        }


                        //self["drop_ItemOrder"+property+"Array"].removeAll();
                        //self["get"+property]();
                    }
                }

            }

            } else {


            self.input<%=myself.CLASSNAME%>Id(rootViewModel.frontToEditData().id);


<%for(var i=0; i<myself.BASIC.length; i++){%>
self.input<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>(rootViewModel.frontToEditData().<%=myself.BASIC[i]['$']['name']%>);
<%}%>

            //input into the professor table in pop-up modial


            // for many to one relationship
            for (var i in self.oneArray) {

                (function(i) {

            if(!self.dropdownMap.hasOwnProperty(self.oneArray[i])){

                var url = 'http://localhost:8080/<%=myself.CLASSNAME%>/'+self.input<%=myself.CLASSNAME%>Id()+"/"+self.attMap[self.oneArray[i]].attInSelfName;

                // alert(url);
                self[self.attMap[self.oneArray[i]].inputAttRef].removeAll();
                getAssociatedAtt(url, function (output) {

                    delete output["_links"];
                    self[self.attMap[self.oneArray[i]].inputAttRef].push(output);
                    // alert(JSON.stringify(output));

                    });
                } else {
                var url = 'http://localhost:8080/<%=myself.CLASSNAME%>/'+self.input<%=myself.CLASSNAME%>Id()+"/"+self.attMap[self.oneArray[i]].attInSelfName;

                // alert(url);
                    self[self.attMap[self.oneArray[i]].dropInputAttData](null);
                //self[self.attMap[self.oneArray[i]].inputAttRef].removeAll();
                             $.ajax({
                    type:"GET",
                    url: url
                })
                    .done(function (data0) {
                        //
                        // professorInput.ele = data0;
                        // alert(JSON.stringify(professorInput.ele));
                        self[self.oneArray[i] + "_selectValOpt"](
                            {
                                value: data0.id,
                                label: self.repNameCalc(self.oneArray[i], data0)
                            }
                        );

                    }).fail(function (data1){
                    self[self.oneArray[i] + "_selectValOpt"](null);
                    // professorInput(null);
                });

            }
                })(i);
            }
            // delete topush.ele["_links"];
            // self.inputCourseProfessorArray.push(topush.ele);

            // for one to many relationship

                // var toPushList = {};
                for(var j in self.manyArray) {

                    (function(j) {

                    var url = 'http://localhost:8080/<%=myself.CLASSNAME%>/'+self.input<%=myself.CLASSNAME%>Id()+"/"+self.attMap[self.manyArray[j]].attInSelfName;

                    self[self.attMap[self.manyArray[j]].inputAttRef].removeAll();

                    getAssociatedAtt(url, function (output) {
                        for (var ii in output["_embedded"][self.manyArray[j]]) {
                            delete output["_embedded"][self.manyArray[j]][ii]["_links"];
                            self[self.attMap[self.manyArray[j]].inputAttRef].push(output["_embedded"][self.manyArray[j]][ii]);
                            if (ii == output["_embedded"][self.manyArray[j]].length-1) {
                            self[self.attMap[self.manyArray[j]].inputAttRef].sort(function (left, right) {
                            return left["id"] == right["id"] ? 0 : (left["id"] < right["id"]  ? -1 : 1)
                            });
                        }

                    }
                });
                    })(j);


            }

}

        };

self.oneArray = <%- JSON.stringify(oneArray)%>;

self.manyArray = <%- JSON.stringify(manyArray)%>;

self.attMap = <%- JSON.stringify(attMap, null, 4) %>;
self.dropdownMap = <%- JSON.stringify(myself.REPNAMEMAP) %>;

//calculated the concatenated name for dropdown list
self.repNameCalc = function(property, data){
    var repName = "";
    var namelist = self.dropdownMap[property];
        for (var i=0; i<namelist.length; i++) {
            if(data[namelist[i]]!=null) {
                var space = (i == namelist.length-1) ? "" : " ";
                repName = repName + data[namelist[i]] +space ;
            }
        }
    return repName;
};

        self.curAtt = ko.observable("");

        // self.selectAllDisabled = ko.observable();
        self.selectAllDisabled = ko.computed(function ()
            {   if(self.attMap[self.curAtt()]!=undefined)
                return self.attMap[self.curAtt()].oneOrMany === "one";
            else return false;}
        );

        self.selectAtt = ko.computed(function() {
                if (self.attMap[self.curAtt()] != undefined) {
                    if (self.attMap[self.curAtt()].oneOrMany === "one") {
                        return "Select " + self.curAtt();
                    } else {
                        return "Select " + self.curAtt() + " (multiple)";
                    }
                }
                else return "";
            }
        );



        //intialize the observable values in the forms
        self.input<%=myself.CLASSNAME%>Id = ko.observable();


<%for(var ii=0; ii<myself.BASIC.length; ii++){%>
self.input<%=myself.CLASSNAME + myself.BASIC[ii]['$']['name']%> = ko.observable();
<%}%>

// for  one array (many to one or one to one)

self.mapFields = function(item) {
    var data = item['data'];
    var mappedItem = {};
    mappedItem['data'] = {};
    mappedItem['data']['label'] = data['label'];
    mappedItem['data']['value'] = data['id'];
    mappedItem['metadata'] = {'key': data['id']};

    return mappedItem;
};
self.dataMapping = {'mapFields': self.mapFields};


<% for (var jj in oneArray) {%>

<%if(myself.REPNAMEMAP[oneArray[jj]]== undefined) {%>

    self.input<%=myself.CLASSNAME+oneArray[jj]%>Array = ko.observableArray().extend({ deferred: true });
    self.input<%=oneArray[jj]%>DataProvider = new oj.ArrayDataProvider(self.input<%=myself.CLASSNAME+oneArray[jj]%>Array, {keyAttributes: 'id'});

    self.input<%=oneArray[jj]%>ColumnArray = [

    {"headerText": "<%-oneArray[jj]%> Id", "field": "id", "headerStyle": 'font-weight:bold;  Height:8px; background-color: white'},

<% for(var j in entityMap[oneArray[jj]].basic) {-%>
{
"headerText": "<%-entityMap[oneArray[jj]].labels[j]%>",
"field" : "<%-entityMap[oneArray[jj]].basic[j]['$']['name']%>",
"headerStyle" : 'font-weight:bold;  Height:8px; background-color: white'
}
<%if(j!= entityMap[oneArray[jj]].length-1) {-%>
,
<%}-%>
<%}-%>
];


<%} else {%>

self.<%=oneArray[jj]%>_selectValOpt = ko.observable();

self.drop_input<%=oneArray[jj]%>DataProvider = ko.observable();

self.drop_<%=myself.CLASSNAME+oneArray[jj]%>Array = ko.observableArray().extend({ deferred: true });


self.drop_<%-oneArray[jj]%>Arraydataprovider = new oj.ArrayDataProvider(self.drop_<%=myself.CLASSNAME+oneArray[jj]%>Array, {keyAttributes: 'id'});
self.drop_<%-oneArray[jj]%>dataProvider = new oj.ListDataProviderView(self.drop_<%-oneArray[jj]%>Arraydataprovider, {'dataMapping':  self.dataMapping});

//self.drop_<%=myself.CLASSNAME+oneArray[jj]%>Array.push({
//        value: "blank",
//        label: ""
//    });
self.get<%-oneArray[jj]%> = function(){
$.get('http://localhost:8080/<%-oneArray[jj]%>', function (data) {
//// alert(JSON.stringify(data));
//console.log(data);

// for (var i = 0; i < data.length; i++) {
var extractedData = data["_embedded"].<%-oneArray[jj]%>;
//// alert(JSON.stringify(extractedData));


for (var i = 0; i < extractedData.length; i++) {
//// alert(i);
//// alert("test");

var topush = {
id: extractedData[i].id,
label: self.repNameCalc("<%-oneArray[jj]%>", extractedData[i])

};
self.drop_<%=myself.CLASSNAME+oneArray[jj]%>Array.push(topush);

}


});
};

<%}%>

<%}%>


<%for (var i in oneArray) {%>
self.<%-oneArray[i]%>_attObservableArray = ko.observableArray();


self.<%-oneArray[i]%>_attArraydataprovider = new oj.ArrayTableDataSource(self.<%-oneArray[i]%>_attObservableArray, {keyAttributes: 'id'});


self.<%-oneArray[i]%>_selectAttColumnArray_single = ko.observable();
<%}%>

<%for (var i in manyArray) {%>
self.<%-manyArray[i]%>_attObservableArray = ko.observableArray();


self.<%-manyArray[i]%>_attArraydataprovider = new oj.ArrayTableDataSource(self.<%-manyArray[i]%>_attObservableArray, {keyAttributes: 'id'});
self.<%-manyArray[i]%>_selectAttColumnArray_multi = ko.observable();
<%}%>



// for  many array (one to many or many to many)


<% for (var jj in manyArray) {%>
self.input<%=myself.CLASSNAME+manyArray[jj]%>Array = ko.observableArray().extend({ deferred: true });
self.input<%=manyArray[jj]%>DataProvider = new oj.ArrayDataProvider(self.input<%=myself.CLASSNAME+manyArray[jj]%>Array, {keyAttributes: 'id'});

self.input<%=manyArray[jj]%>ColumnArray = [

{"headerText": "<%-manyArray[jj]%> Id", "field": "id", "headerStyle": 'font-weight:bold'},

<% for(var j in entityMap[manyArray[jj]].basic) {-%>
{
"headerText": "<%-entityMap[manyArray[jj]].labels[j]%>",
"field" : "<%-entityMap[manyArray[jj]].basic[j]['$']['name']%>",
"headerStyle" : 'font-weight:bold'
}
<%if(j!= entityMap[manyArray[jj]].basic.length-1) {-%>
,
<%}-%>
<%}-%>
];
<%}%>

        self.selectAttColumnArray_multi = ko.observable();


        function getAssociatedAtt(url, handledata) {

            $.ajax({
                type:"GET",
                url: url
            })
                .done(function (data0) {
                    handledata(data0);
                    //
                    // professorInput.ele = data0;
                    // alert(JSON.stringify(professorInput.ele));

                }).fail(function (data1){
                // professorInput(null);
            });
        }



        self.selectAttributeinEditDialog = function(data, event) {

            // document.getElementById('selectAttTable').selection = [];
            // alert("open nested popup");
            // alert(self.selectAllDisabled());


            self.curAtt(data.substring(4));
            self[self.curAtt()+"_attObservableArray"].removeAll();


            // self.selectAllDisabled(self.attMap[self.curAtt()].oneOrMany === "one");
            // self.selectAllDisabled(true);
            var callback = function() {
                var q = jQuery.Deferred(), queue = q;

                queue = queue.then(function () {
                    if (self.selectAllDisabled()) {
                        var array = JSON.parse(JSON.stringify(self[self.attMap[self.curAtt()].inputColumnArray]));

                        array.unshift({
                            "renderer": oj.KnockoutTemplateUtils.getRenderer(self.curAtt()+"_checkbox_tmpl_single", true),
                            "headerRenderer": oj.KnockoutTemplateUtils.getRenderer(self.curAtt()+"_checkbox_hdr_tmpl_single", true)
                        });
                        self[self.curAtt()+"_selectAttColumnArray_single"](array);
                    } else {
                        var array = JSON.parse(JSON.stringify(self[self.attMap[self.curAtt()].inputColumnArray]));

                        array.unshift({
                            "renderer": oj.KnockoutTemplateUtils.getRenderer(self.curAtt()+"_checkbox_tmpl_multi", true),
                            "headerRenderer": oj.KnockoutTemplateUtils.getRenderer(self.curAtt()+"_checkbox_hdr_tmpl_multi", true)
                        });
                        self[self.curAtt()+"_selectAttColumnArray_multi"](array);

                    }
                });
                queue.done();
                return q.resolve(true);
            };

            var selectAttTable = self.selectAllDisabled()? self.curAtt()+"_selectAttTable_single" : self.curAtt()+"_selectAttTable_multi";
            var attSelectDialog = self.selectAllDisabled()? "#"+self.curAtt()+"_attSelectDialog_single" : "#"+self.curAtt()+"_attSelectDialog_multi";

            callback().then(
            $.get('http://localhost:8080/'+self.curAtt(), function (data) {
                //console.log(data);
                //console.log(self.deptObservableArray());

                //self.deptObservableArray([]);


                // for (var i = 0; i < data.length; i++) {
                var extractedData = data["_embedded"][self.curAtt()];
                // alert(JSON.stringify(extractedData));


                for (var i = 0; i < extractedData.length; i++) {
                    // alert(i);
                    // alert("test");
                    var topush = JSON.parse(JSON.stringify(extractedData[i]));
                    delete topush["_links"];
                    topush.Selected =  ko.observable([]);

                    // var topush = {
                    //     Selected: ko.observable([]),
                    //     id: extractedData[i].id,
                    //     firstName: extractedData[i].firstName,
                    //     lastName: extractedData[i].lastName
                    // };

                    var inputAttRef = self.attMap[self.curAtt()].inputAttRef;
                    // alert("topush"+JSON.stringify(topush));
                    // alert(JSON.stringify(self[inputAttRef]()));
                    if (self[inputAttRef]()!=null) {
                        for (var j = 0; j < self[inputAttRef]().length; j++) {
                            if (self[inputAttRef]()[j]!=undefined && self[inputAttRef]()[j].id == topush.id) {
                                topush.Selected(["checked"]);
                            }
                        }
                    }

                    self[self.curAtt() +"_attObservableArray"].push(topush);
                    // alert(JSON.stringify(self.attObservableArray()));
                    //self.attArraydataprovider = new oj.ArrayTableDataSource(self.attObservableArray, {keyAttributes: 'id'});

                }

                // self.clearAttributeSelect();
                // alert("clear");
                // document.getElementById(selectAttTable).selection = [];


                var selectionObj = [];
                var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                for (var i = 0; i < totalSize; i++) {
                    self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                        if (row.data.Selected().length > 0 &&
                            row.data.Selected()[0] == 'checked') {
                            selectionObj.push({startIndex: {row: row.index}, endIndex: {row: row.index}});
                        }

                        if (row.index == totalSize - 1) {
                            document.getElementById(selectAttTable).selection = selectionObj;
                        }
                    });
                }

            })
            ).then( function(){
                // document.getElementById(selectAttTable).selection=[];

                //alert("open");
                document.querySelector(attSelectDialog).open();
            });


        };


        self.selectionListener_single = function(event)
        {

            //alert('selectionlistner-single');
            var data = event.detail;


            if (data != null) {

                var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                for (var i = 0; i < totalSize; i++) {
                    self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                        var oldObj = document.getElementById(self.curAtt()+'_selectAttTable_single').selection;
                        //alert(JSON.stringify(oldObj));

                        for (var j=0; j<oldObj.length; j++) {
                            if(oldObj[j].startIndex.row === row.index){
                                row.data.Selected([]);
                            }
                        }


                    });
                }


                var selectionObj = data.value;
                // var totalSize = self.attArraydataprovider.totalSize();


                for (var i = 0; i < totalSize; i++) {
                    self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                        var foundInSelection = false;
                        if (selectionObj) {
                            // alert(JSON.stringify(selectionObj));
                            for (var j = 0; j < selectionObj.length; j++) {
                                var range = selectionObj[j];
                                var startIndex = range.startIndex;
                                var endIndex = range.endIndex;

                                if (startIndex != null && startIndex.row != null) {
                                    if (row.index >= startIndex.row && row.index <= endIndex.row) {
                                        row.data.Selected(['checked']);
                                        foundInSelection = true;
                                    }
                                }
                            }
                        }
                        if (!foundInSelection) {
                            row.data.Selected([]);
                        }
                    });
                }
            }



        };
        self.selectionListener_multi = function(event)
        {

            //alert(JSON.stringify(event.detail.previousValue));
            //alert('selectionlistner-multi');
            var data = event.detail;

            if (data != null) {
                var selectionObj = data.value;
                var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                var i, j;
                for (i = 0; i < totalSize; i++) {
                    self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                        var foundInSelection = false;
                        if (selectionObj) {
                            // alert(JSON.stringify(selectionObj));
                            for (j = 0; j < selectionObj.length; j++) {
                                var range = selectionObj[j];
                                var startIndex = range.startIndex;
                                var endIndex = range.endIndex;

                                if (startIndex != null && startIndex.row != null) {
                                    if (row.index >= startIndex.row && row.index <= endIndex.row) {
                                        row.data.Selected(['checked']);
                                        foundInSelection = true;
                                    }
                                }
                            }
                        }
                        if (!foundInSelection) {
                            row.data.Selected([]);
                        }
                    });
                }
            }


        };
        self.selectAllListener = function(event)
        {
            // alert("selectall");
            if (self._clearCheckboxHdr)
            {
                return;
            }
            var data = event.detail;
            if (data != null)
            {
                var table = document.getElementById(self.curAtt()+'_selectAttTable_multi');
                if (data['value'].length > 0)
                {
                    var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                    table.selection = [{startIndex: {"row":0}, endIndex:{"row": totalSize - 1}}];
                }
                else
                {
                    table.selection = [];
                }
            }
        };
        self.syncCheckboxes = function(event)
        {
            // alert("sync");
            // alert(JSON.stringify(event));
            event.stopPropagation();

            if(self.selectAllDisabled()) {
                //alert("synccheckbox single");

                setTimeout(function () {
                    // sync the checkboxes with selection obj
                    var selectionObj = [];
                    var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                    var i;
                    var oldSelectionObj = document.getElementById(self.curAtt()+'_selectAttTable_single').selection;

                    for (i = 0; i < totalSize; i++) {
                        self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                            if (row.data.Selected().length > 0 &&
                                row.data.Selected()[0] == 'checked') {
                                if(oldSelectionObj!=null && oldSelectionObj.length>0 && oldSelectionObj[0].startIndex.row == row.index) {
                                    row.data.Selected([]);
                                } else {
                                    selectionObj.push({startIndex: {row: row.index}, endIndex: {row: row.index}});
                                }
                            }

                            if (row.index == totalSize - 1) {
                                document.getElementById(self.curAtt()+'_selectAttTable_single').selection = selectionObj;
                                // alert("selectionobj after sync"+ JSON.stringify(selectionObj));
                            }
                        });
                    }
                }, 0);

            } else {
                //alert("synccheckbox multi");


                if (event.currentTarget.id != self.curAtt()+'_table_checkboxset_hdr_multi') {
                    self._clearCheckboxHdr = true;
                    $('#'+self.curAtt()+'_table_checkboxset_hdr_multi')[0].value = [];

                    self._clearCheckboxHdr = false;
                }
                setTimeout(function () {
                    // sync the checkboxes with selection obj
                    var selectionObj = [];
                    var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
                    var i;
                    for (i = 0; i < totalSize; i++) {
                        self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                            if (row.data.Selected().length > 0 &&
                                row.data.Selected()[0] == 'checked') {
                                selectionObj.push({startIndex: {row: row.index}, endIndex: {row: row.index}});
                            }

                            if (row.index == totalSize - 1) {
                                document.getElementById(self.curAtt()+'_selectAttTable_multi').selection = selectionObj;
                                // alert("selectionobj after sync"+ JSON.stringify(selectionObj));
                            }
                        });
                    }
                }, 0);
            }
        };
        self.clearAttributeSelect = function() {
            var selectAttTable = self.selectAllDisabled()? self.curAtt()+"_selectAttTable_single" : self.curAtt()+"_selectAttTable_multi";

            var totalSize = self[self.curAtt()+"_attArraydataprovider"].totalSize();
            for (var i = 0; i < totalSize; i++) {
                self[self.curAtt()+"_attArraydataprovider"].at(i).then(function (row) {
                    var oldObj = document.getElementById(selectAttTable).selection;

                    for (var j=0; j<oldObj.length; j++) {
                        if(oldObj[j].startIndex.row === row.index){
                            row.data.Selected([]);
                        }
                    }


                });
            }
            document.getElementById(selectAttTable).selection=[];

            if(!self.selectAllDisabled()) {
                self._clearCheckboxHdr = true;
                $('#'+self.curAtt()+'_table_checkboxset_hdr_multi')[0].value = [];

                self._clearCheckboxHdr = false;
            }

        };
        self.closeAttributeSelect = function () {


            // // get current id of record being updated on current page
            //
            // var main_element = document.getElementById('table');
            // var main_currentRow = main_element.currentRow;
            //
            // var main_rowIndex = main_currentRow['rowIndex'];
            // var main = vm.CourseObservableArray()[main_rowIndex];

            // get selected id of associated attributes
            // var element = document.getElementById('selectAttTable');
            // var currentRow = element.currentRow;
    var selectAttTable = self.selectAllDisabled()? self.curAtt()+"_selectAttTable_single" : self.curAtt()+"_selectAttTable_multi";
    var attSelectDialog = self.selectAllDisabled()? "#"+self.curAtt()+"_attSelectDialog_single" : "#"+self.curAtt()+"_attSelectDialog_multi";

            var selection = document.getElementById(selectAttTable).selection;

            self[self.attMap[self.curAtt()].inputAttRef].removeAll();

            if (selection != null && selection.length>0) {

                for (var i=0; i< selection.length; i++) {

                    var rowIndex = selection[i].startIndex.row;
                    var selected = self[self.curAtt()+"_attObservableArray"]()[rowIndex];
                    // alert(JSON.stringify(self.attObservableArray()));
                    self[self.attMap[self.curAtt()].inputAttRef].push(selected);
                    // alert(JSON.stringify(self.inputCourseProfessorArray()));

                    // alert(JSON.stringify(selected));
                }



                document.querySelector(attSelectDialog).close();
            } else {
                if(confirm("Are you sure you do not want to select any row?")){
                    document.querySelector(attSelectDialog).close();
                }
            }
        };
        self.clearSelectedAtt =  function(data) {

            self[self.attMap[data.substring(5)].inputAttRef].removeAll();
        };

        self.saveButtonClick = function() {
            var elementArray = [];



        <%for(var i=0; i<myself.BASIC.length; i++){%>
        elementArray.push(document.getElementById("<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>Input"));
        <%}%>



            var invalidflag=false;
            for (var i=0; i<elementArray.length; i++) {
                if (!(elementArray[i].valid === "valid")) {
                   if(elementArray[i].showMessages !== undefined){
                    elementArray[i].showMessages();
                    if (invalidflag==false) invalidflag = true;
                    }
                }
            }


            //proceed to add or update record only if all input fields are valid
            if(invalidflag==false) {

                self.updateRow();
            }

        };

        self.updateRow = function () {

            // self.calculated(false);
            // DO PUT


            $.ajax({
                type: "PUT",
                contentType: 'application/json; charset=utf-8',
                url: "http://localhost:8080/<%=myself.CLASSNAME%>/" + self.input<%=myself.CLASSNAME%>Id(),
                data: JSON.stringify(
                    {
                        'Id': self.input<%=myself.CLASSNAME%>Id(),

                        <%for(var i=0; i<myself.BASIC.length; i++){%>
                        '<%=myself.BASIC[i]['$']['name']%>' : self.input<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>()
                        <%if(i!= myself.BASIC.length-1) {%>
                        ,
                        <%}%>
                        <%}%>
        }
                ),
                dataType: 'json',
                success: function (returndata) {
                    console.log(returndata);



                }

            });

            // ready for updating attribute entities
            var def = new $.Deferred();
            var queuechain1 =def;


            //if (self.manyArray.length == 0) {
            //defs[0].resolve(true);
            //}

            var addUrls = [];
            var deleteEntities = [];
            for (var ii in self.oneArray) {
                (function (ii) {
                    var inputAttRef;
                    var array = [];

                    //var inputAttRef = self.attMap[self.oneArray[j]].inputAttRef;

                    if (self.dropdownMap.hasOwnProperty(self.oneArray[ii])) {
                        inputAttRef = self.attMap[self.oneArray[ii]].dropInputAttData;
                        if (self[inputAttRef]() != null) {
                            array.push({
                                id: self[inputAttRef]()
                            });
                            //attId = "value";
                        }
                    } else {
                        inputAttRef = self.attMap[self.oneArray[ii]].inputAttRef;
                        if (self[inputAttRef]()[0] != null) {
                            array = self[inputAttRef]();
                        }
                    }


                    if (array.length > 0) {

                        var associationUrl = "http://localhost:8080/api/<%=myself.CLASSNAME%>/" + self.input<%=myself.CLASSNAME%>Id() + "/" + self.oneArray[ii] + "/" + array[0].id;
                        addUrls.push(associationUrl);
                    } else {
                        deleteEntities.push(self.oneArray[ii]);
                    }
                })(ii)
            }





            var addcontainer = function (count, count_del) {
                if (count >= 0) {
                    $.ajax({
                            type: "POST",
                            url: addUrls[count],
                            success: function () {
                            //    alert("connection success one");
                                count--;
                                addcontainer(count);
                            },
                            error: function (xhr) {
                                console.log('error', xhr);
                                // alert("connection failed");
                            }
                        }
                    );
                } else {
                    deletecontainer(count_del);
                }
            };

            var deletecontainer = function (count) {
                if (count >= 0) {
                    $.ajax({
                        type: "GET",
                        url: "http://localhost:8080/api/<%=myself.CLASSNAME%>/" + self.input<%=myself.CLASSNAME%>Id() + "/" + deleteEntities[count]
                    }).done(
                        function (output) {
                            // alert(JSON.stringify(output));
                            // var q = jQuery.Deferred(),
                            //     queuechain = q;

                            $.ajax({
                                url: "http://localhost:8080/api/<%=myself.CLASSNAME%>/" + self.input<%=myself.CLASSNAME%>Id() + "/" + deleteEntities[count],
                                type: "DELETE",
                                success: function (response) {
                                    //  alert("delete success one");
                                    $.ajax({
                                        url: "http://localhost:8080/" + deleteEntities[count] + "/" + output.id + "/<%-downFirst(myself.CLASSNAME)%>In" + deleteEntities[count] + "/" + self.input<%=myself.CLASSNAME%>Id(),
                                        type: "DELETE",
                                        success: function (response) {
                                            //  alert("delete success one");
                                            console.log(response);
                                            // if (count == 0) {
                                            //     oj.Router.rootInstance.go("<%=myself.CLASSNAME%>");
                                            //
                                            // } else {
                                            count--;
                                            deletecontainer(count);
                                            // }

                                        },
                                        error: function (e) {
                                            console.log(e);
                                            //  alert("delete failed one");
                                        }
                                    })

                                },

                                error: function (e) {
                                    console.log(e);
                                    //  alert("delete failed");

                                }
                            });
                        }


                    ).fail(function () {

                            count--;
                            deletecontainer(count);
                            // }
                        }
                    )
                } else {
                    queuechain1.done(
                        function () {

                        }
                    );
                    def.resolve(true);
                    oj.Router.rootInstance.go("<%=myself.CLASSNAME%>");
                }

            };



                    var manyAssociation = function(j){
           // (function(j) {

                if(j>=0) {

                var inputAttRefMany = self.attMap[self.manyArray[j]].inputAttRef;


                var attAssociationUrl = "http://localhost:8080/<%=myself.CLASSNAME%>/" + self.input<%=myself.CLASSNAME%>Id() + "/" + self.attMap[self.manyArray[j]].attInSelfName;
                var attUrl = "http://localhost:8080/"+self.manyArray[j];


                $.ajax({
                    type:"GET",
                    url: attAssociationUrl
                })
                    .done(function (data0) {

                        // var q = jQuery.Deferred(),
                        //     queuechain = q;

                        var oldList = data0["_embedded"];
                        //alert("old list" + JSON.stringify(oldList));

                        // var foundInOld = false;
                        // var foundInNew = false;
                        // var id = output["_embedded"][self.manyArray[j]][k].id; // this id is in the list of available list
                        //

                        var oldIdList = [];
                        for (var i = 0; i < oldList[self.manyArray[j]].length; i++) {
                            // var overlap = false;
                            // for (var jj = 0; jj < self[inputAttRefMany]().length; jj++) {
                            //
                            //     if (self[inputAttRefMany]()[jj].id === oldList[self.manyArray[j]][i].id) {
                            //         //
                            //         overlap = true;
                            //         break;
                            //     }
                            // }
                            oldIdList.push(oldList[self.manyArray[j]][i].id);

                        }


                        var addListMany = [];
                        for (var jj = 0; jj < self[inputAttRefMany]().length; jj++) {

                            // (function (jj) {
                            //
                            //     var overlap = false;
                            //     for (var i = 0; i < oldList[self.manyArray[j]].length; i++) {
                            //
                            //         if (oldList[self.manyArray[j]][i].id === self[inputAttRefMany]()[jj].id) {
                            //             //
                            //             overlap = true;
                            //             break;
                            //
                            //         }
                            //     }
                            // }
                            addListMany.push(self[inputAttRefMany]()[jj].id);
                        }

                        var deleteOld = function(entcnt, oldIdList, cnt) {
                            if (cnt >= 0) {
                                $.ajax({
                                    url: "http://localhost:8080/<%=myself.CLASSNAME%>/" + self.input<%=myself.CLASSNAME%>Id() + "/" + self.attMap[self.manyArray[entcnt]].attInSelfName + "/" + oldIdList[cnt],

                                    type: "DELETE",
                                    success: function (response) {
                                        //alert("delete success");
                                        $.ajax({
                                            url: "http://localhost:8080/" + self.manyArray[entcnt] + "/" + oldIdList[cnt] + "/<%-downFirst(myself.CLASSNAME)%>In" + self.manyArray[entcnt] + "/" + self.input<%=myself.CLASSNAME%>Id(),
                                            type: "DELETE",
                                            success: function (response) {
                                                //alert("delete success");
                                                cnt--;
                                                deleteOld(entcnt, oldIdList, cnt);
                                            },
                                            error: function (e) {
                                                console.log(e);
                                                //alert("delete failed");
                                            }
                                        })
                                    },

                                    error: function (e) {
                                        console.log(e);
                                        //alert("delete failed");

                                    }
                                })
                            } else {
                                addNew(entcnt, addListMany, addListMany.length - 1);
                            }
                        }

                        //);

                var addNew = function(entcnt, addListMany, cnt) {
                    if(cnt>=0){
                    var associationUrl = "http://localhost:8080/api/<%=myself.CLASSNAME%>/" + self.input<%=myself.CLASSNAME%>Id() + "/" + self.manyArray[entcnt] + "/" + addListMany[cnt];
                    //alert("post many" + associationUrl);
                        $.ajax({
                            type: "POST",
                            url: associationUrl,
                            success: function (returndata) {
                                // alert("connection success many");
                                cnt--;
                                addNew(entcnt, addListMany, cnt);

                            },
                            error: function (xhr) {
                                console.log('error', xhr);
                                console.log(associationUrl);
                            }
                        })

                    }else {
                        j--;
                    manyAssociation(j);
                    }


                }

                            //delete from the other direction
                            // queuechain1 = queuechain1.then(
                            //     $.ajax({
                            //         url: "http://localhost:8080/"+self.manyArray[j]+"/" + oldList[self.manyArray[j]][i].id + "/authorIn" + self.manyArray[j]+"/" + self.inputAuthorId(),
                            //         type: "DELETE",
                            //         success: function (response) {
                            //             //alert("delete success");
                            //             console.log(response);
                            //
                            //         },
                            //         error: function (e) {
                            //             console.log(e);
                            //             //alert("delete failed");
                            //         }
                            //     })
                            // );
            //};
            deleteOld(j, oldIdList, oldIdList.length-1);

                            // if (overlap!==true) {
                            //
                            //     //need to delete the old relationship
                            //     queuechain1 = queuechain1.then(
                            //         $.ajax({
                            //             url: "http://localhost:8080/Author/" + self.inputAuthorId() + "/" + self.attMap[self.manyArray[j]].attInSelfName +"/" + oldList[self.manyArray[j]][i].id,
                            //
                            //             type: "DELETE",
                            //             success: function (response) {
                            //                 //alert("delete success");
                            //
                            //             },
                            //
                            //             error: function (e) {
                            //                 console.log(e);
                            //                 //alert("delete failed");
                            //
                            //             }
                            //         })
                            //     );
                            //
                            //
                            //     //delete from the other direction
                            //     queuechain1 = queuechain1.then(
                            //         $.ajax({
                            //             url: "http://localhost:8080/"+self.manyArray[j]+"/" + oldList[self.manyArray[j]][i].id + "/authorIn" + self.manyArray[j]+"/" + self.inputAuthorId(),
                            //             type: "DELETE",
                            //             success: function (response) {
                            //                 //alert("delete success");
                            //                 console.log(response);
                            //
                            //             },
                            //             error: function (e) {
                            //                 console.log(e);
                            //                 //alert("delete failed");
                            //             }
                            //         })
                            //     );
                            //
                            // }

                       // }

                        //alert(inputAttRefMany);
                        //alert("input length many" +JSON.stringify(self[inputAttRefMany]()));

                            // for (var jj = 0; jj < self[inputAttRefMany]().length; jj++) {
                            //
                            //     (function (jj) {
                            //
                            //         var overlap = false;
                            //     for (var i = 0; i < oldList[self.manyArray[j]].length; i++) {
                            //
                            //         if (oldList[self.manyArray[j]][i].id === self[inputAttRefMany]()[jj].id) {
                            //             //
                            //             overlap = true;
                            //             break;
                            //
                            //         }
                            //     }
                            //     //alert("overlap"+overlap);
                            //
                            //     if (overlap != true) {
                            //         //post the newly added
                            //         //alert("start post because not overlap");
                            //         var associationUrl = "http://localhost:8080/api/Author/" + self.inputAuthorId() + "/" + self.manyArray[j] + "/" + self[inputAttRefMany]()[jj].id;
                            //         //alert("post many" + associationUrl);
                            //         queuechain1 = queuechain1.then(
                            //             $.ajax({
                            //                 type: "POST",
                            //                 url: associationUrl,
                            //                 success: function (returndata) {
                            //                    // alert("connection success many");
                            //
                            //                 },
                            //                 error: function (xhr) {
                            //                     console.log('error', xhr);
                            //                     console.log(associationUrl);
                            //                 }
                            //             })
                            //         )
                            //     }}(jj));
                            // }

                        //if (j==self.manyArray.length-1) {
                        //    queuechain1.done(
                        //        function () {

                        //        }
                        //    );
                        //    defs[0].resolve(true);
                        //}


                    }).fail(function (data1){

                    //if (j==self.manyArray.length-1) {
                    //    queuechain1.done(
                    //        function () {

                     //       }
                    //    );
                     //   defs[0].resolve(true);
                    //}

                });
                //
                // function getAjax(url, handleData) {
                //     $.ajax({
                //         url: url,
                //         success: function (data) {
                //             handleData(data);
                //         }
                //     });
            }else {
         addcontainer(addUrls.length - 1, deleteEntities.length - 1);

        }
                //})(j)

                }
        manyAssociation(self.manyArray.length-1);

        

        };


        self.backButtonClick=function(){
            //alert("hi, I going back to page: "+oj.Router.rootInstance.retrieve().page);
            for (var property in self.attMap){
                if(self.attMap.hasOwnProperty(property)){
                    if(!self.dropdownMap.hasOwnProperty(property)){

                    } else {
                        self[self.attMap[property].dropInputAttData](null);
                        self[property + "_selectValOpt"](null);
                    }
                }

            }
            oj.Router.rootInstance.go("<%=myself.CLASSNAME%>");
        };




<% for (var jj in oneArray) {%>
    self.to<%-oneArray[jj]%> = function() {

    //var rootViewModel = ko.dataFor(document.getElementById('globalBody'));
    var stack = oj.Router.rootInstance.retrieve() == undefined? [] : oj.Router.rootInstance.retrieve();


    //alert(self.inputItemOrderOrderLineArray());
    stack.push( {
        'from':"Edit<%-myself.CLASSNAME%>",
        //'data':
        //{
        'id': self.input<%-myself.CLASSNAME%>Id(),

        <%for(var i=0; i<myself.BASIC.length; i++){-%>

            '<%-myself.BASIC[i]['$']['name']%>': self.input<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>()
            <%if( (oneArray.length + manyArray.length) != 0 || i!=myself.BASIC.length-1) {-%>
            ,
            <%}-%>
        <%}-%>

        <%for(var j in oneArray) {-%>
            '<%-oneArray[j]%>':
            <%if(myself.REPNAMEMAP.hasOwnProperty(oneArray[j])) {-%>
                self.<%-oneArray[j]%>_selectValOpt()
            <%}else {-%>
            self.input<%=myself.CLASSNAME + oneArray[j]%>Array()[0]
            <%}-%>
            <%if(manyArray.length != 0 || j !=oneArray.length-1) {-%>
            ,
            <%}-%>
        <%}-%>

        <%for(var k in manyArray) {-%>
            '<%-manyArray[k]%>': self.input<%=myself.CLASSNAME + manyArray[k]%>Array()
            <%if( k !=oneArray.length-1) {-%>
            ,
            <%}-%>
        <%}-%>

        //}
    });

    oj.Router.rootInstance.store(stack);

    oj.Router.rootInstance.go("<%-oneArray[jj]%>");


    };
<%}%>


<% for (var jj in manyArray) {%>
        self.to<%-manyArray[jj]%> = function() {

        //var rootViewModel = ko.dataFor(document.getElementById('globalBody'));
        var stack = oj.Router.rootInstance.retrieve() == undefined? [] : oj.Router.rootInstance.retrieve();


        //alert(self.inputItemOrderOrderLineArray());
        stack.push( {
        'from':"Edit<%-myself.CLASSNAME%>",
        //'data':
        //{
            'id': self.input<%-myself.CLASSNAME%>Id(),

            <%for(var i=0; i<myself.BASIC.length; i++){-%>
                '<%-myself.BASIC[i]['$']['name']%>': self.input<%=myself.CLASSNAME + myself.BASIC[i]['$']['name']%>()
                <%if( (oneArray.length + manyArray.length) != 0 || i!=myself.BASIC.length-1) {-%>
                ,
                <%}-%>
            <%}%>

            <%for(var j in oneArray) {-%>
                '<%-oneArray[j]%>':
                <%if(myself.REPNAMEMAP.hasOwnProperty(oneArray[j])) {-%>
                self.<%-oneArray[j]%>_selectValOpt()
                <%}else {-%>
                self.input<%=myself.CLASSNAME + oneArray[j]%>Array()[0]
                <%}-%>
                <%if(manyArray.length != 0 || j !=oneArray.length-1) {-%>
                ,
                <%}-%>
            <%}-%>

            <%for(var k in manyArray) {-%>
                '<%-manyArray[k]%>': self.input<%=myself.CLASSNAME + manyArray[k]%>Array()
                <%if( k !=oneArray.length-1) {-%>
                ,
                <%}-%>
            <%}-%>
        //}
        });

        oj.Router.rootInstance.store(stack);

        oj.Router.rootInstance.go("<%-manyArray[jj]%>");


        };
<%}%>

    }

    vm=new viewModel;

    return vm;
});